from InquirerPy import inquirer
from InquirerPy.base.control import Choice
from InquirerPy.separator import Separator
from rich.table import Table

from controllers.player_controller import PlayerController
from utils.utils import clear_console
from views.base_view import BaseView

from .player_view import PlayerView
from .tournament_view import TournamentView


class ReportView(BaseView):
    def __init__(self):
        """
        Initialise la vue des rapports avec les vues des tournois et des joueurs ainsi que le contr√¥leur des joueurs.
        """

        self.tournament_view = TournamentView()
        self.player_view = PlayerView()
        self.player_controller = PlayerController()
        super().__init__()

    def show_menu(self):
        """
        Affiche le menu des rapports avec diff√©rentes options de rapports et permet √† l'utilisateur de faire un choix.
        """
        # Calcul de la longueur du choix le plus long pour ajuster la taille du Separator
        longest_choice_length = max(
            len("üìã Liste de tous les joueurs (A-Z)"),
            len("üìã Liste de tous les tournois"),
            len("üìã Nom et dates d‚Äôun tournoi donn√©"),
            len("üìã Liste des joueurs d'un tournoi (A-Z)"),
            len("üìã Liste de tous les tours du tournoi et de tous les matchs du tour"),
            len("üîô Retour au menu principal"),
        )
        menu_options = [
            Choice(value="1", name="üìã Liste de tous les joueurs (A-Z)"),
            Choice(value="2", name="üìã Liste de tous les tournois"),
            Choice(value="3", name="üìã Nom et dates d‚Äôun tournoi donn√©"),
            Choice(value="4", name="üìã Liste des joueurs d'un tournoi (A-Z)"),
            Choice(value="5", name="üìã Liste de tous les tours du tournoi et de tous les matchs du tour"),
            Separator(line="-" * (longest_choice_length + 1)),
            Choice(value="6", name="üîô Retour au menu principal"),
        ]
        self.choice = inquirer.select(
            message="Gestion des rapports\n",
            choices=menu_options,
            pointer="‚ùØ",
            qmark="",
            style=self.custom_style,
            show_cursor=False,
            long_instruction="Dans le menu des rapports, vous avez acc√®s √† ces six fonctionnalit√©s :"
            "\n\n- Liste de tous les joueurs (tri√©s par ordre alphab√©tique)"
            "\n- Liste de tous les tournois (stock√©s dans le fichier 'datas/tournaments.json')"
            "\n- Nom et dates d‚Äôun tournoi donn√© (informations d√©taill√©es d'un tournoi donn√©)"
            "\n- Liste des joueurs d'un tournoi (tri√©s par ordre alphab√©tique)"
            "\n- Liste de tous les rounds d'un tournoi et de tous les matchs d'un round"
            "\n- Retour au menu principal (vous pouvez revenir au menu principal pour les autres fonctionnalit√©s)\n"
            "\nPour chaque fonctionnalit√©, vous pouvez exporter les donn√©es dans diff√©rents formats."
        ).execute()

    def get_user_choice(self):
        """
        Retourne le choix de l'utilisateur dans le menu des rapports.
        """

        return self.choice

    def show_message(self, message):
        """
        Affiche un message √† l'utilisateur.
        """

        print(message)

    def list_players(self, players_df):
        """
        Affiche la liste des joueurs en utilisant player_view.list_players.
        """
        self.player_view.list_players(players_df)

    def list_tournaments(self, tournaments_df):
        """
        Affiche la liste des tournois en utilisant tournament_view.list_tournaments.
        """
        self.tournament_view.list_tournaments(tournaments_df)

    def show_tournament_details(self, tournament_data):
        """
        Affiche les d√©tails d'un tournoi avec la table RichTable.
        """
        clear_console()
        table = Table(title="D√©tails du tournoi", show_header=True, header_style="bold magenta")
        table.add_column("Nom")
        table.add_column("Lieu")
        table.add_column("Date de d√©but")
        table.add_column("Date de fin")
        table.add_column("Description")

        table.add_row(
            tournament_data["name"],
            tournament_data["location"],
            tournament_data["start_date"],
            tournament_data["end_date"],
            tournament_data["description"],
        )

        self.console.print(table)

    def select_tournament(self, tournament_choices):
        """
        Permet √† l'utilisateur de s√©lectionner un tournoi existant dans la liste des tournois.
        """

        choices = [Choice(value=index, name=name) for name, index in tournament_choices]
        choices.append(Separator(line=50 * "-"))
        choices.append(Choice(value=None, name="üîô Annuler"))
        choice = inquirer.select(
            message="Choisissez un tournoi \n",
            choices=choices,
            pointer="‚ùØ",
            qmark="",
            style=self.custom_style,
            show_cursor=False,
        ).execute()
        clear_console()
        return choice

    def display_rounds_and_matches(self, tournament_name, rounds, players_df):
        self.console.print(f"[bold magenta]Tournoi : {tournament_name}[/bold magenta]\n")

        for round_ in rounds:
            table = Table(title=round_.name, show_header=True, header_style="bold magenta")
            table.add_column("Joueur 1", style="cyan")
            table.add_column("ID Joueur 1", style="green")
            table.add_column("Joueur 2", style="cyan")
            table.add_column("ID Joueur 2", style="green")
            table.add_column("Score", justify="center", style="yellow")

            for match in round_.matches:
                # Chercher les joueurs dans players_df pour r√©cup√©rer les informations compl√®tes
                player1_data = players_df.loc[players_df['national_id'].str.strip() == match.player1_id.strip()]
                player2_data = players_df.loc[players_df['national_id'].str.strip() == match.player2_id.strip()]

                if player1_data.empty:
                    player1_info = "[Joueur introuvable]"
                    player1_id = match.player1_id
                else:
                    player1_info = f"{player1_data.iloc[0]['first_name']} {player1_data.iloc[0]['last_name']}"
                    player1_id = player1_data.iloc[0]['national_id']

                if player2_data.empty:
                    player2_info = "[Joueur introuvable]"
                    player2_id = match.player2_id
                else:
                    player2_info = f"{player2_data.iloc[0]['first_name']} {player2_data.iloc[0]['last_name']}"
                    player2_id = player2_data.iloc[0]['national_id']

                table.add_row(
                    player1_info,
                    player1_id,
                    player2_info,
                    player2_id,
                    f"{match.score_player1} - {match.score_player2}"
                )

            self.console.print(table)

    def ask_export_choice(self):
        """
        Demande √† l'utilisateur s'il souhaite exporter les donn√©es ou revenir au menu pr√©c√©dent.
        """

        # Calcul de la longueur du choix le plus long pour ajuster la taille du Separator
        longest_choice_length = max(len("üìÅ Exporter les donn√©es"), len("üîô Retour au menu pr√©c√©dent"))
        choices = [
            Choice(value="Exporter", name="üìÅ Exporter les donn√©es"),
            Separator(line="-" * (longest_choice_length + 1)),
            Choice(value="Retour au menu pr√©c√©dent", name="üîô Retour au menu pr√©c√©dent"),
        ]
        choice = inquirer.select(
            message="\nQue souhaitez-vous faire ?\n",
            choices=choices,
            style=self.custom_style,
            pointer="‚ùØ",
            amark="",
            qmark="",
            show_cursor=False,
        ).execute()
        clear_console()
        return choice

    def ask_export_format(self):
        """
        Demande √† l'utilisateur de choisir le format d'exportation des donn√©es.
        """
        # Calcul de la longueur du choix le plus long pour ajuster la taille du Separator
        longest_choice_length = max(len("HTML"), len("TXT"), len("CSV"), len("Annuler"))
        choices = [
            Choice(value="HTML", name="HTML"),
            Choice(value="TXT", name="TXT"),
            Choice(value="CSV", name="CSV"),
            Separator(line="-" * longest_choice_length),
            Choice(value="Annuler", name="Annuler"),
        ]
        choice = inquirer.select(
            message="\nDans quel format ?\n",
            choices=choices,
            style=self.custom_style,
            pointer="‚ùØ",
            amark="",
            qmark="",
            show_cursor=False,
        ).execute()
        clear_console()
        return choice
